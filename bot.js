require("dotenv").config();
const { TelegramClient } = require("telegram");
const { StringSession } = require("telegram/sessions");
const { NewMessage } = require('telegram/events');
const input = require("input");
const fs = require("fs-extra");
const path = require("path");
const winston = require("winston");

// === üîß –ó–º—ñ–Ω–Ω—ñ –∑ .env ===
const apiId = parseInt(process.env.API_ID);
const apiHash = process.env.API_HASH;
const sourceChannel = process.env.SOURCE_CHANNEL;
const targetChat = process.env.TARGET_CHAT;

const stringSession = new StringSession(process.env.STRING_SESSION);
const logsDir = path.join(__dirname, "logs");
fs.ensureDirSync(logsDir);

// === üìÑ –õ–æ–≥–µ—Ä ===
const logger = winston.createLogger({
  level: "info",
  format: winston.format.combine(
    winston.format.timestamp(),
    winston.format.printf(
      ({ timestamp, level, message }) => `[${timestamp}] ${level.toUpperCase()}: ${message}`
    )
  ),
  transports: [
    new winston.transports.File({ filename: path.join(logsDir, "bot.log") }),
    new winston.transports.Console(),
  ],
});

// // === üì¶ –°–µ—Å—ñ—è ===
// let stringSession;
// if (fs.existsSync(sessionPath)) {
//   const saved = fs.readFileSync(sessionPath, "utf8");
//   stringSession = new StringSession(saved);
//   logger.info("‚úÖ –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é –∑–±–µ—Ä–µ–∂–µ–Ω—É —Å–µ—Å—ñ—é.");
// } else {
//   stringSession = new StringSession("");
//   logger.info("üÜï –ù–æ–≤–∞ —Å–µ—Å—ñ—è.");
// }

// === ü§ñ –û—Å–Ω–æ–≤–Ω–∞ –ª–æ–≥—ñ–∫–∞ ===
(async () => {
  const client = new TelegramClient(stringSession, apiId, apiHash, {
    connectionRetries: 5,
  });

  console.log("üü¢ –ó–∞–ø—É—Å–∫ –∫–ª—ñ—î–Ω—Ç–∞...");
  await client.start();
  console.log("‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–æ! –°–ª—É—Ö–∞—é –∫–∞–Ω–∞–ª–∏");

  logger.info("üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–∏–π.");
  const channels = sourceChannel.split(",").map(c => c.trim());
  client.addEventHandler(
    async (update) => {
      try {
        const message = update.message;
        if (!message || !message.message) return;
        const text = message.message
        // if (text.toLowerCase().includes("–≤—ñ–ª—Å–µ—Ç" | "26" | "–∫–æ–ª–µ—Å–∞" | "–ø–µ—Ä–µ–¥–Ω—î –∫–æ–ª–µ—Å–æ" | "–∑–∞–¥–Ω—î –∫–æ–ª–µ—Å–æ" | "–∫–æ–ª–µ—Å–∞ –≤—ñ–ª—Å–µ—Ç")) {
        if (text.toLowerCase().includes("26" | "–∫–æ–ª–µ—Å–∞")) {
          const chat = await message.getChat();
          const channelTitle = chat?.title || "–ù–µ–≤—ñ–¥–æ–º–∏–π –∫–∞–Ω–∞–ª";

          const formattedMessage = `üì£ *${channelTitle}*\n\n${text}`;

          await client.sendMessage(targetChat, {
            message: formattedMessage,
          });

          logger.info("‚û°Ô∏è –ü–µ—Ä–µ—Å–ª–∞–Ω–æ:", formattedMessage);
        }
      } catch (err) {
        logger.error("‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: " + err.message);
      }
    },

    new NewMessage({ chats: channels })
  );
})();
